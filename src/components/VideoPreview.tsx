
import React, { useRef, useEffect, useState } from 'react';
import { useRecording } from '@/context/RecordingContext';
import { useCredits } from '@/context/CreditsContext';
import { Button } from '@/components/ui/button';
import { Share2, Download, Trash2, FileText } from 'lucide-react';
import { toast } from 'sonner';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { useNavigate } from 'react-router-dom';

const VideoPreview: React.FC = () => {
  const { recordedBlob, resetRecording } = useRecording();
  const { creditBalance, spendCredits } = useCredits();
  const videoRef = useRef<HTMLVideoElement>(null);
  const [isGeneratingArticle, setIsGeneratingArticle] = useState(false);
  const [articleText, setArticleText] = useState<string | null>(null);
  const [showInsufficientCreditsDialog, setShowInsufficientCreditsDialog] = useState(false);
  const navigate = useNavigate();

  const GENERATE_ARTICLE_COST = 1000;

  useEffect(() => {
    if (recordedBlob && videoRef.current) {
      const videoURL = URL.createObjectURL(recordedBlob);
      videoRef.current.src = videoURL;
      
      return () => {
        URL.revokeObjectURL(videoURL);
      };
    }
  }, [recordedBlob]);

  const handleShare = () => {
    if (navigator.share && recordedBlob) {
      const file = new File([recordedBlob], 'gravacao.webm', { type: recordedBlob.type });
      navigator.share({
        title: 'Minha Gravação',
        files: [file]
      }).catch(error => {
        console.error('Error sharing:', error);
        toast.error('Não foi possível compartilhar o vídeo');
      });
    } else {
      toast.info('Compartilhamento não disponível no seu navegador');
    }
  };

  const handleDownload = () => {
    if (recordedBlob) {
      const url = URL.createObjectURL(recordedBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `tutorial-${new Date().toISOString().split('T')[0]}.webm`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      toast.success('Vídeo salvo com sucesso');
    }
  };

  const handleDiscard = () => {
    resetRecording();
    toast.info('Gravação descartada');
  };

  const handleCreateArticle = async () => {
    if (!recordedBlob) return;

    if (!spendCredits(GENERATE_ARTICLE_COST)) {
      setShowInsufficientCreditsDialog(true);
      return;
    }

    try {
      setIsGeneratingArticle(true);
      toast.info('Iniciando transcrição do vídeo...');
      toast.info(`${GENERATE_ARTICLE_COST} créditos foram utilizados`);

      // First, get the audio from the video blob
      const audioContext = new AudioContext();
      const audioSource = await getAudioFromVideo(recordedBlob, audioContext);
      
      // Use Web Speech API for transcription (or any other transcription service)
      const transcript = await transcribeAudio(audioSource);
      
      // Now send the transcript to OpenAI for article generation
      toast.info('Criando artigo baseado na transcrição...');
      const article = await generateArticleFromTranscript(transcript);
      
      // Set the generated article text
      setArticleText(article);
      toast.success('Artigo criado com sucesso!');
    } catch (error) {
      console.error('Error creating article:', error);
      toast.error('Não foi possível criar o artigo');
    } finally {
      setIsGeneratingArticle(false);
    }
  };

  const getAudioFromVideo = async (videoBlob: Blob, audioContext: AudioContext): Promise<AudioBuffer> => {
    // This is a simplified mock implementation
    // In a real application, you would extract the audio track from the video
    // For demo purposes, we'll return a mock audio buffer
    return audioContext.createBuffer(2, 44100, 44100);
  };

  const transcribeAudio = async (audioBuffer: AudioBuffer): Promise<string> => {
    // This is a simplified mock implementation
    // In a real application, you would use a transcription service like OpenAI Whisper
    // For demo purposes, we'll return a mock transcript
    return "This is a mock transcript of the recorded tutorial. In a real implementation, this would be the actual text transcribed from the video.";
  };

  const generateArticleFromTranscript = async (transcript: string): Promise<string> => {
    // This is a simplified mock implementation
    // In a real application, you would send the transcript to OpenAI API
    // For demo purposes, we'll return a mock article
    return `# Tutorial Article\n\nThis is a generated article based on the video transcript. In a real implementation, this would be content generated by OpenAI based on the actual transcript.\n\n## Key Points\n\n1. First important point from the tutorial\n2. Second important point\n3. Third important point\n\n## Summary\n\nThis tutorial covered several important aspects of the topic. The main takeaways are...`;
  };

  if (!recordedBlob) {
    return null;
  }

  return (
    <div className="w-full animate-fade-in">
      <div className="rounded-xl overflow-hidden shadow-md bg-white border border-gray-100">
        <video 
          ref={videoRef} 
          controls
          className="w-full h-auto"
          autoPlay
        />
        
        <div className="p-4 flex flex-wrap items-center justify-between gap-4">
          <h3 className="text-lg font-medium">Gravação concluída</h3>
          
          <div className="flex items-center flex-wrap gap-3">
            <Button
              variant="outline"
              size="sm"
              onClick={handleDiscard}
              className="flex items-center gap-2"
            >
              <Trash2 className="h-4 w-4" />
              <span>Descartar</span>
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={handleShare}
              className="flex items-center gap-2"
            >
              <Share2 className="h-4 w-4" />
              <span>Compartilhar</span>
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={handleCreateArticle}
              disabled={isGeneratingArticle}
              className="flex items-center gap-2"
            >
              <FileText className="h-4 w-4" />
              <span>
                {isGeneratingArticle 
                  ? 'Criando artigo...' 
                  : `Criar artigo (${GENERATE_ARTICLE_COST} créditos)`}
              </span>
            </Button>
            
            <Button
              size="sm"
              onClick={handleDownload}
              className="flex items-center gap-2 bg-brand hover:bg-brand-dark"
            >
              <Download className="h-4 w-4" />
              <span>Download</span>
            </Button>
          </div>
        </div>
        
        {articleText && (
          <div className="p-4 mt-2 border-t border-gray-100">
            <h4 className="text-lg font-medium mb-2">Artigo Gerado</h4>
            <div className="bg-gray-50 p-4 rounded-md whitespace-pre-line">
              {articleText}
            </div>
          </div>
        )}
      </div>

      <Dialog open={showInsufficientCreditsDialog} onOpenChange={setShowInsufficientCreditsDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Créditos insuficientes</DialogTitle>
            <DialogDescription>
              Você não tem créditos suficientes para gerar um artigo.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="p-4 bg-brand/5 rounded-md flex justify-between items-center">
              <div>
                <p className="text-sm font-medium">Saldo atual</p>
                <p className="text-xl font-bold">{creditBalance} créditos</p>
              </div>
              <div>
                <p className="text-sm font-medium">Necessário</p>
                <p className="text-xl font-bold">{GENERATE_ARTICLE_COST} créditos</p>
              </div>
            </div>
          </div>
          <div className="flex flex-col gap-3">
            <Button 
              onClick={() => {
                setShowInsufficientCreditsDialog(false);
                navigate('/credits');
              }}
              className="bg-brand hover:bg-brand-dark"
            >
              Adicionar créditos
            </Button>
            <Button 
              variant="outline" 
              onClick={() => setShowInsufficientCreditsDialog(false)}
            >
              Cancelar
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default VideoPreview;
